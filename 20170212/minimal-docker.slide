A Minimal Docker Image
+ a Go app deployment pattern
12 Feb 2017

Reed Wade
reed@typist.geek.nz

* Scope of Talk

- a minimal useful docker image -- how low can you go?
- it turns out that Go applications can be super useful plus be microscopic


* The World's Smallest Docker Image

    $ tar c --files-from /dev/null | docker import - very-small-image
    sha256:5a09aecdf7c32480aeb87c5dfe795c38091430cecc4144369ad1e2d0011ef928
    $ 

Same as the *scratch* image on dockerhub.

An empty image:

- nothing you don't need
- very small, you can hold it in your hand
- no gigantic dist image
- etc


* Sweet, just add a shell script.

Dockerfile:
.code 001-hello/Dockerfile

hello.sh:
.code 001-hello/hello.sh



* Build

	$ docker build .
	Sending build context to Docker daemon 3.072 kB
	Step 1/3 : FROM very-small-image
	 ---> 5a09aecdf7c3
	Step 2/3 : ADD hello.sh /bin/
	 ---> 3014cc9fc263
	Removing intermediate container 8bc012966a0a
	Step 3/3 : CMD /bin/hello.sh
	 ---> Running in 0d7d9bea491c
	 ---> c021e14707ca
	Removing intermediate container 0d7d9bea491c
	Successfully built c021e14707ca
	$


* Run!!!


	$ docker run --rm -it c021e14707ca 
	standard_init_linux.go:178: exec user process caused "no such file or directory"
	$

Poo.. what's the deal? This makes no sense. Did I spell something wrong.


* What's the deal?

The deal is you don't have /bin/bash. And also you don't have the libs bash would want and related dependencies.

You could gather them up but that's a pain. 

But...

Sometimes I just want to freaking print "hello" -- I don't want to become an expert at typing `ldd`

* Not a shell script

Dockerfile:
.code 002-go-hello/Dockerfile

hello.go:
.code 002-go-hello/hello.go


* Build


	$ go build -o hello -ldflags "-linkmode external -extldflags -static" hello.go
	$ ldd hello
		not a dynamic executable
	


	$ docker build .
	Sending build context to Docker daemon 1.637 MB
	Step 1/3 : FROM very-small-image
	 ---> 5a09aecdf7c3
	Step 2/3 : ADD hello /bin/
	 ---> 171da97498ee
	Removing intermediate container 5f7912974056
	Step 3/3 : CMD /bin/hello
	 ---> Running in 4f114a22f4f7
	 ---> a9621e774aee
	Removing intermediate container 4f114a22f4f7
	Successfully built a9621e774aee
	
* Run!!!

	$ docker run --rm -it a9621e774aee
	hello
	$ 

You are a winner.

* What did you win?

"Hello"

Ok, tho -- I lied.

I don't really want a docker container that just emits "hello".


* A Fancy Web App

Some static content plus an api service.

Dockerfile:
.code 003-fancy-webapp/Dockerfile

docroot/index.html:
.code 003-fancy-webapp/docroot/index.html

* webapp.go:
.code 003-fancy-webapp/webapp.go


* Build

	$ go build -o webapp -ldflags "-linkmode external -extldflags -static" webapp.go


	$ docker build .
	Sending build context to Docker daemon 7.089 MB
	Step 1/5 : FROM scratch
	 ---> 
	Step 2/5 : ADD docroot /var/docroot
	 ---> Using cache
	 ---> 7501264ed703
	Step 3/5 : ADD webapp /bin/
	 ---> dd42e2d9b6ef
	Removing intermediate container 8d3e6e4ae4ca
	Step 4/5 : EXPOSE 19501
	 ---> Running in 3b590b1b699b
	 ---> 1953a02e62c4
	Removing intermediate container 3b590b1b699b
	Step 5/5 : CMD /bin/webapp
	 ---> Running in 7ca77ad2315d
	 ---> 760793a16ce9
	Removing intermediate container 7ca77ad2315d
	Successfully built 760793a16ce9
	

* Run!!!

	$ docker run --rm -it  760793a16ce9
	2017/02/12 10:31:28 I am a fancy web app, find me on http://ADDR:19501
	2017/02/12 10:31:35 /

And, separately:

    $ curl http://172.17.0.2:19501/api


* Also

- https://docs.docker.com/engine/userguide/eng-image/baseimages/
- https://golang.org/
- https://coreos.com/

- docker inspect --format '{{ .NetworkSettings.IPAddress }}' $(docker ps -q)

And, you don't need to make `very-small-image`. Just use `scratch`.
